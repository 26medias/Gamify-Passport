{
  "name": "fbgraphapi",
  "description": "Simple facebook api client",
  "keywords": [
    "client",
    "facebook",
    "api"
  ],
  "author": {
    "name": "Nguyen Van Nhu"
  },
  "homepage": "https://github.com/vanng822/facebook-nodejs",
  "contributors": [],
  "dependencies": {},
  "repository": {
    "type": "git",
    "url": "git://github.com/vanng822/facebook-nodejs.git"
  },
  "bugs": {
    "url": "https://github.com/vanng822/facebook-nodejs/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/vanng822/facebook-nodejs/blob/master/LICENSE"
    }
  ],
  "version": "0.3.10",
  "readme": "## Facebook nodejs\nA simple module for querying Facebook graph api and fql\n\n## Usage example\n\n\tvar express = require('express');\n\tvar fbgraph = require('fbgraphapi');\n\tvar app = express();\n\tvar http = require('http');\n\tvar server = http.createServer(app);\n\t\n\t\t\n\tapp.use(express.bodyParser());\n\tapp.use(express.cookieParser());\n\tapp.use(express.session({secret : \"SECRET\"}));\n\tapp.use(fbgraph.auth( {\n\t\t\tappId : \"...\",\n\t\t\tappSecret : \"...\",\n\t\t\tredirectUri : \"http://0.0.0.0:3000/\"\n\t\t}));\n\t\n\t\n\tapp.get('/login', function(req, res) {\n\t\tconsole.log('Start login');\n\t\tfbgraph.redirectLoginForm(req, res);\t\n\t});\n\t\n\tapp.get('/', function(req, res) {\n\t\tif (!req.hasOwnProperty('facebook')) {\n\t\t\tconsole.log('You are not logged in');\n\t\t\treturn res.redirect('/login');\n\t\t}\n\t\t/* See http://developers.facebook.com/docs/reference/api/ for more */\n\t\treq.facebook.graph('/me', function(err, me) {\n\t\t    console.log(me);\n\t\t});\n\t\t\n\t\treq.facebook.graph('/me?fields=id,name', function(err, me) {\n\t\t    console.log(me);\n\t\t});\n\t\t\n\t\treq.facebook.me(function(err, me) {\n\t\t    console.log(me);\n\t\t});\n\t\t\n\t\treq.facebook.me(function(err, me) {\n\t\t    console.log(me);\n\t\t}, 'id,name');\n\t\t\n\t\t// /me/likes\n\t\treq.facebook.my.likes(function(err, likes) {\n\t\t    console.log(likes);\n\t\t});\n\t\t\n\t\t/* Single fql query */\n\t\treq.facebook.fql('SELECT uid FROM user WHERE uid IN (SELECT uid2 FROM friend WHERE uid1=me())  AND is_app_user = 1', function(err, result) {\n\t\t    console.log(result);\n\t\t});\n\t\t\n\t\t/* Multiple fql queries */\n\t\treq.facebook.fql({\n\t\t    uids : 'SELECT uid FROM user WHERE uid IN (SELECT uid2 FROM friend WHERE uid1=me()) AND is_app_user = 1',\n\t\t    myapp : 'SELECT application_id, role FROM developer WHERE developer_id = me()'\n\t\t}, function(err, result) {\n\t\t    console.log(result);\n\t\t});\n\t\tres.end(\"Check console output\");\n\t});\n\t\n\tserver.listen(3000);\n\nOr if have a valid access token for instance from javascript fb connect\n\t\n\tvar fb = new Facebook(accessToken);\n\tfb.me(function(err, me) {\n\t\tconsole.log(me);\n\t});\n\t\n## Facebook API reference\nVisit the links bellow for API documentation of Facebook API\nhttps://developers.facebook.com/docs/graph-api/using-graph-api\n\n## Methods\n### auth(config)\nconfig is an object with those properties\n* `appId` Facebook application Id\n* `appSecret` Secret hash key generated by Facebook\n* `redirectUri` The url to redirect to when user logged in.\n* `scope` Permissions/scope that your application asks for, optional and default empty.\n* `skipUrlPatterns` Array of patterns which to not apply authentication on. They can be regexp or string. If string a regexp will be created with wildcard appending at the end. If you want an exact url make sure specify regexp.\n\n### authenticate(req, res, next)\nThis method is returned when calling auth() above. When loggin is successfull it will assign a Facebook instance to req (see example above).\n\n### redirectLoginForm(req, res)\nThis method will redirect user to Facebook login form.\n\n### destroySession(req, res, clearCookie)\nThis method is for logging out user or for any reason want to clear user's logged-in info\n\n## Classes\n### Facebook(accessToken)\n* `accessToken` Valid access token from Facebook (oauth_token).\n* `graph(path, callback)` Main method for making call to Facebook API. Path can contain only /me/likes or with params like /me/likes?limit=3\n* `fql(query, callback)` Specific method for making fql query to Facebook API\n* `search(params, callback)` params is an object which properties are any param based on this https://developers.facebook.com/docs/graph-api/using-graph-api#search\n* `me(callback, fields)` Specific method to get info of the logged user, same as /me when using graph-method. Fields is comma-separated for instance fields=id,name\n* `getAppFriends(callback, fields)` Return friends that use your Facebook application. Fields is comma-separated.\n* `my` Instance of My class\n\nUsage: if have a valid accessToken for instance from js login\n\t\n\tvar fb = new Facebook(accessToken);\n\tfb.me(function(err, me) {\n\t\tconsole.log(me);\n\t});\n\t\n\n### My(facebook)\nThis class uses internally to create object my (property in Facebook). This object wrap the me-object. Each connection type is a method. This means that you can make a call like\n\t\n\treq.facebook.my.friends(function(err, friends) {\n\t\tconsole.log(friends)\n\t});\n\t\n\t// OR for checkins\n\treq.facebook.my.checkins(function(err, checkins) {\n\t\tconsole.log(checkins)\n\t});\n\nSupported connection types are:\n\n* `friends`\n* `feed`\n* `likes`\n* `movies`\n* `music`\n* `books`\n* `albums`\n* `notes`\n* `permissions`\n* `photos`\n* `videos`\n* `events`\n* `groups`\n* `checkins`\n* `locations`\n\nIf you can not find a connection that Facebook has but not here you can use connection-method\n\t\n\treq.facebook.my.connection('{connection type}', function(err, result) {\n\t\tconsole.log(result)\n\t});\n\n",
  "readmeFilename": "README.md",
  "_id": "fbgraphapi@0.3.10",
  "dist": {
    "shasum": "f66de7761c46d3548bc886324de745c565d6012b"
  },
  "_from": "fbgraphapi@",
  "_resolved": "https://registry.npmjs.org/fbgraphapi/-/fbgraphapi-0.3.10.tgz"
}
