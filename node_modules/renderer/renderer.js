var _ 					= require('underscore');
var toolset 			= require('toolset');
var asyncReplace 		= require('async-replace');

// Plugins
var plugins_output 		= require('./plugins/output.js').plugins;
var plugins_file 		= require('./plugins/file.js').plugins;
var plugins_dependency 	= require('./plugins/dependency.js').plugins;
var plugins 			= _.extend({},plugins_output, plugins_file, plugins_dependency);

var cache 				= {};

var caching				= false;

function render(code, data, callback, options) {
	
	options = _.extend({
		cache:		false	// Are we generating a cache? (don't parse the data)
	}, options);
	
	var renderStack 	= new toolset.stack();
	
	// Find the variables
	var plugin;
	for (plugin in plugins) {
		if ((options.cache === true && plugins[plugin].cache === true) || options.cache === false) {
			renderStack.add(function(p, cb) {
				var regex = new RegExp("{"+p.plugin+"\:(.*)}", "igm");
				
				asyncReplace(code, regex, function(match, expr, pos, html, done) {
					plugins[p.plugin].parse(regex, match, expr, pos, data, function(output) {
						if (plugins[p.plugin].render == true) {
							// re-render the output
							output = render(output, data, function(rendered) {
								done(null, rendered);
							}, options);
						} else {
							// no need to render, output
							done(null, output);
						}
					});
					
				}, function(err, result) {
				    code = result;
				    cb();
				});
				
			},{plugin:plugin});
		}
	}
	
	renderStack.process(function() {
		callback(code);
	}, false);	// sync
}


exports.engine = function(filename, data, callback, Gamify, res, req) {
	if (!cache[filename] || !caching) {
		// /Create/Reload the cache
		toolset.file.read("pages/views/"+filename, function(content) {
			// Render without parsing, to cache
			render(content, data, function(rendered) {
				// Save to cache
				cache[filename] = rendered;
				// Parse
				render(rendered, data, callback)
			}, {cache:true})
		});
	} else {
		render(cache[filename], data, callback)
	}
};